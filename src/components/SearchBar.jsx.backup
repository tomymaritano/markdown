import { useState, useRef, useEffect } from 'react'
import Icons from './Icons'
import { useSearch } from '../hooks/useSearch'
import DropdownMenu, { DropdownMenuItem, DropdownHeader } from './ui/DropdownMenu'

const SearchBar = ({
  notes = [],
  onSelectResult = () => {},
  placeholder = 'Search notes...',
  showResults = true,
  showHistory = true,
  autoFocus = false,
  className = '',
  onQueryChange = null, // Optional external query handler
  onPinNote = null, // Optional pin action handler
  onDeleteNote = null, // Optional delete action handler
  onMoveNote = null, // Optional move action handler
}) => {
  const {
    query,
    results,
    isSearching,
    searchHistory,
    search,
    setQuery,
    clearSearch,
    addToHistory,
  } = useSearch(notes)
  const [isOpen, setIsOpen] = useState(false)
  const [selectedIndex, setSelectedIndex] = useState(-1)
  const inputRef = useRef(null)
  const resultsRef = useRef(null)

  // Focus input when autoFocus is true
  useEffect(() => {
    if (autoFocus && inputRef.current) {
      inputRef.current.focus()
    }
  }, [autoFocus])

  // Reset selected index when results change
  useEffect(() => {
    setSelectedIndex(-1)
  }, [results])

  // Handle input change
  const handleInputChange = e => {
    const value = e.target.value
    setQuery(value)
    if (onQueryChange) {
      onQueryChange(value)
    }
    setIsOpen(true)
    setSelectedIndex(-1)
  }

  // Handle input focus
  const handleInputFocus = () => {
    setIsOpen(true)
  }

  // Handle input blur with delay to allow clicks on results
  const handleInputBlur = () => {
    setTimeout(() => {
      setIsOpen(false)
      setSelectedIndex(-1)
    }, 150)
  }

  // Handle keyboard navigation
  const handleKeyDown = e => {
    if (!isOpen) return

    const items = getSelectableItems()

    switch (e.key) {
      case 'ArrowDown':
        e.preventDefault()
        setSelectedIndex(prev => {
          const nextIndex = prev < items.length - 1 ? prev + 1 : 0
          scrollToSelectedItem(nextIndex)
          return nextIndex
        })
        break

      case 'ArrowUp':
        e.preventDefault()
        setSelectedIndex(prev => {
          const nextIndex = prev > 0 ? prev - 1 : items.length - 1
          scrollToSelectedItem(nextIndex)
          return nextIndex
        })
        break

      case 'Enter':
        e.preventDefault()
        if (e.metaKey || e.ctrlKey) {
          // Cmd+Enter or Ctrl+Enter: open in new tab/window (if supported)
          handleEnterWithModifier()
        } else if (selectedIndex >= 0 && items[selectedIndex]) {
          const selectedItem = items[selectedIndex]
          if (selectedItem.type === 'result') {
            onSelectResult(selectedItem.data)
            addToHistory(query) // Add to history when selecting a result
          } else if (selectedItem.type === 'history') {
            setQuery(selectedItem.data)
            search(selectedItem.data)
          }
          setIsOpen(false)
        } else if (query.trim()) {
          // If no item selected but have query, trigger search
          search(query)
          if (results.length > 0) {
            setSelectedIndex(0) // Auto-select first result
          }
        }
        break

      case 'Tab':
        e.preventDefault()
        // Tab cycles through results like arrow down
        setSelectedIndex(prev => {
          const nextIndex = prev < items.length - 1 ? prev + 1 : 0
          scrollToSelectedItem(nextIndex)
          return nextIndex
        })
        break

      case 'Escape':
        e.preventDefault()
        if (selectedIndex >= 0) {
          // First escape: clear selection
          setSelectedIndex(-1)
        } else if (query) {
          // Second escape: clear search
          clearSearch()
          setIsOpen(false)
        } else {
          // Third escape: close dropdown and blur
          setIsOpen(false)
          inputRef.current?.blur()
        }
        break

      case 'Home':
        e.preventDefault()
        if (items.length > 0) {
          setSelectedIndex(0)
          scrollToSelectedItem(0)
        }
        break

      case 'End':
        e.preventDefault()
        if (items.length > 0) {
          const lastIndex = items.length - 1
          setSelectedIndex(lastIndex)
          scrollToSelectedItem(lastIndex)
        }
        break
    }
  }

  // Handle Enter with modifier keys (Cmd+Enter)
  const handleEnterWithModifier = () => {
    if (selectedIndex >= 0) {
      const items = getSelectableItems()
      const selectedItem = items[selectedIndex]
      if (selectedItem.type === 'result' && onSelectResult) {
        // For now, treat same as regular Enter
        // In future, could implement "open in split view" or similar
        onSelectResult(selectedItem.data)
        addToHistory(query)
        setIsOpen(false)
      }
    }
  }

  // Scroll selected item into view
  const scrollToSelectedItem = index => {
    if (!resultsRef.current || index < 0) return

    const selectedElement = resultsRef.current.querySelector(
      `[data-result-index="${index}"]`
    )
    if (selectedElement) {
      selectedElement.scrollIntoView({
        behavior: 'smooth',
        block: 'nearest',
      })
    }
  }

  // Get all selectable items (results + history)
  const getSelectableItems = () => {
    const items = []

    // Add search results
    results.forEach(result => {
      items.push({ type: 'result', data: result })
    })

    // Add search history if no results and no query
    if (results.length === 0 && !query.trim() && showHistory) {
      searchHistory.forEach(historyItem => {
        items.push({ type: 'history', data: historyItem })
      })
    }

    return items
  }

  // Handle result click
  const handleResultClick = result => {
    onSelectResult(result)
    setIsOpen(false)
  }

  // Handle history click
  const handleHistoryClick = historyItem => {
    setQuery(historyItem)
    search(historyItem)
    setIsOpen(false)
  }

  // Handle clear button click
  const handleClearClick = () => {
    clearSearch()
    setIsOpen(false)
    inputRef.current?.focus()
  }

  // Highlight matches in text
  const highlightText = (text, searchQuery) => {
    if (!searchQuery.trim()) return text

    const regex = new RegExp(
      `(${searchQuery.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`,
      'gi'
    )
    const parts = text.split(regex)

    return parts.map((part, index) =>
      regex.test(part) ? (
        <mark
          key={index}
          className="bg-theme-accent-yellow text-theme-bg-primary px-0.5 rounded"
        >
          {part}
        </mark>
      ) : (
        part
      )
    )
  }

  // Get enhanced preview text with better context
  const getPreviewText = (note, searchQuery) => {
    if (!note.content) return 'No content'

    const content = note.content
    const query = searchQuery?.trim().toLowerCase()

    // If we have a search query, try to find context around matches
    if (query && query.length >= 2) {
      const lowerContent = content.toLowerCase()
      const queryIndex = lowerContent.indexOf(query)

      if (queryIndex !== -1) {
        // Show context around the match
        const contextRadius = 80
        const start = Math.max(0, queryIndex - contextRadius)
        const end = Math.min(
          content.length,
          queryIndex + query.length + contextRadius
        )

        let preview = content.substring(start, end)

        // Add ellipsis if we're not at the beginning/end
        if (start > 0) preview = '...' + preview
        if (end < content.length) preview = preview + '...'

        return preview
      }
    }

    // Default behavior - show beginning of content
    const maxLength = 150
    if (content.length <= maxLength) return content

    // Try to break at sentence end
    const truncated = content.substring(0, maxLength)
    const lastSentence = truncated.lastIndexOf('. ')
    const lastNewline = truncated.lastIndexOf('\n')

    const breakPoint = Math.max(lastSentence, lastNewline)
    if (breakPoint > maxLength * 0.6) {
      return truncated.substring(0, breakPoint + 1).trim()
    }

    return truncated + '...'
  }

  // Format relative time
  const formatRelativeTime = dateString => {
    if (!dateString) return ''

    const date = new Date(dateString)
    const now = new Date()
    const diffInSeconds = Math.floor((now - date) / 1000)

    if (diffInSeconds < 60) return 'Just now'
    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`
    if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}h ago`
    if (diffInSeconds < 2592000)
      return `${Math.floor(diffInSeconds / 86400)}d ago`

    // For older dates, show formatted date
    return date.toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      year: date.getFullYear() !== now.getFullYear() ? 'numeric' : undefined,
    })
  }

  // Calculate reading time estimate
  const getReadingTime = content => {
    if (!content) return null

    const wordsPerMinute = 200
    const words = content.trim().split(/\s+/).length
    const minutes = Math.ceil(words / wordsPerMinute)

    if (minutes < 1) return '< 1 min read'
    return `${minutes} min read`
  }

  // Get content statistics
  const getContentStats = note => {
    if (!note.content) return null

    const content = note.content
    const words = content.trim().split(/\s+/).length
    const characters = content.length
    const lines = content.split('\n').length

    return { words, characters, lines }
  }

  // Handle quick actions
  const handlePinAction = (e, note) => {
    e.stopPropagation()
    if (onPinNote) {
      onPinNote(note)
    }
  }

  const handleDeleteAction = (e, note) => {
    e.stopPropagation()
    if (onDeleteNote) {
      onDeleteNote(note)
    }
  }

  const handleMoveAction = (e, note) => {
    e.stopPropagation()
    if (onMoveNote) {
      onMoveNote(note)
    }
  }

  const items = getSelectableItems()
  const showDropdown =
    isOpen &&
    (results.length > 0 ||
      (searchHistory.length > 0 && !query.trim() && showHistory))

  return (
    <div className={`relative ${className}`}>
      {/* Search Input */}
      <div className="relative">
        <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
          <Icons.Search size={16} className="text-theme-text-tertiary" />
        </div>

        <input
          ref={inputRef}
          type="text"
          value={query}
          onChange={handleInputChange}
          onFocus={handleInputFocus}
          onBlur={handleInputBlur}
          onKeyDown={handleKeyDown}
          placeholder={placeholder}
          className="w-full pl-10 pr-10 py-2 bg-theme-bg-secondary border border-theme-border-primary rounded-lg text-theme-text-secondary placeholder-theme-text-muted focus:outline-none focus:ring-2 focus:ring-theme-accent-primary focus:border-transparent transition-colors"
          autoComplete="off"
          spellCheck="false"
        />

        {/* Loading/Clear Button */}
        <div className="absolute inset-y-0 right-0 pr-3 flex items-center">
          {isSearching ? (
            <div className="animate-spin">
              <Icons.Loader size={16} className="text-theme-text-tertiary" />
            </div>
          ) : query ? (
            <button
              onClick={handleClearClick}
              className="text-theme-text-tertiary hover:text-theme-text-secondary transition-colors"
              type="button"
            >
              <Icons.X size={16} />
            </button>
          ) : null}
        </div>
      </div>

      {/* Results Dropdown */}
      <DropdownMenu
        ref={resultsRef}
        isOpen={showDropdown}
        width="w-full"
        maxHeight="max-h-[28rem]"
        className="shadow-xl"
      >
          {/* Search Results */}
          {results.length > 0 && (
            <div>
              <div className="px-3 py-2 text-xs font-medium text-theme-text-tertiary bg-theme-bg-tertiary border-b border-theme-border-primary">
                <div className="flex items-center justify-between">
                  <span>
                    {results.length} result{results.length !== 1 ? 's' : ''}
                    {query.trim() && ` for "${query.trim()}"`}
                  </span>
                  {results.length > 0 && (
                    <span className="text-theme-text-muted">
                      {results.filter(r => r.isPinned).length > 0 &&
                        `${results.filter(r => r.isPinned).length} pinned`}
                    </span>
                  )}
                </div>
              </div>

              {results.map((result, index) => {
                const globalIndex = index
                const isSelected = selectedIndex === globalIndex

                return (
                  <div
                    key={result.id}
                    data-result-index={globalIndex}
                    onClick={() => handleResultClick(result)}
                    className={`group px-3 py-3 cursor-pointer border-b border-theme-border-primary last:border-b-0 transition-all duration-150 ${
                      isSelected
                        ? 'bg-theme-accent-primary/10 border-l-2 border-l-theme-accent-primary'
                        : 'hover:bg-theme-bg-tertiary'
                    }`}
                  >
                    <div className="flex items-start space-x-3">
                      <div className="flex-shrink-0 mt-1">
                        <Icons.FileText
                          size={14}
                          className="text-theme-text-tertiary"
                        />
                      </div>

                      <div className="flex-1 min-w-0">
                        {/* Title with match highlighting */}
                        <div className="flex items-center justify-between">
                          <div className="text-sm font-medium text-theme-text-secondary truncate flex-1">
                            {highlightText(result.title, query)}
                          </div>
                          <div className="flex items-center space-x-1 ml-2 flex-shrink-0">
                            {result.isPinned && (
                              <Icons.Star
                                size={12}
                                className="text-theme-accent-yellow"
                              />
                            )}
                            {getContentStats(result) && (
                              <span className="text-xs text-theme-text-tertiary bg-theme-bg-tertiary px-1.5 py-0.5 rounded">
                                {getContentStats(result).words}w
                              </span>
                            )}
                          </div>
                        </div>

                        {/* Enhanced preview with better context */}
                        <div className="text-xs text-theme-text-muted mt-1.5 leading-relaxed">
                          {highlightText(getPreviewText(result, query), query)}
                        </div>

                        {/* Expanded metadata section */}
                        <div className="flex items-center justify-between mt-2.5">
                          <div className="flex items-center space-x-3 text-xs text-theme-text-tertiary">
                            {/* Notebook */}
                            <div className="flex items-center space-x-1">
                              <Icons.Folder size={10} />
                              <span>{result.notebook}</span>
                            </div>

                            {/* Tags */}
                            {result.tags && result.tags.length > 0 && (
                              <div className="flex items-center space-x-1">
                                <Icons.Tag size={10} />
                                <span>
                                  {result.tags.slice(0, 2).join(', ')}
                                </span>
                                {result.tags.length > 2 && (
                                  <span className="text-theme-text-muted">
                                    +{result.tags.length - 2}
                                  </span>
                                )}
                              </div>
                            )}

                            {/* Last modified */}
                            {(result.updatedAt || result.date) && (
                              <div className="flex items-center space-x-1">
                                <Icons.Clock size={10} />
                                <span>
                                  {formatRelativeTime(
                                    result.updatedAt || result.date
                                  )}
                                </span>
                              </div>
                            )}
                          </div>

                          {/* Reading time estimate */}
                          {getReadingTime(result.content) && (
                            <div className="text-xs text-theme-text-tertiary bg-theme-bg-tertiary px-1.5 py-0.5 rounded">
                              {getReadingTime(result.content)}
                            </div>
                          )}
                        </div>

                        {/* Quick actions */}
                        {(onPinNote || onMoveNote || onDeleteNote) && (
                          <div className="flex items-center justify-end space-x-1 mt-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                            {/* Pin/Unpin action */}
                            {onPinNote && (
                              <button
                                onClick={e => handlePinAction(e, result)}
                                className={`p-1 rounded hover:bg-theme-bg-tertiary transition-colors ${
                                  result.isPinned
                                    ? 'text-theme-accent-yellow'
                                    : 'text-theme-text-tertiary hover:text-theme-text-secondary'
                                }`}
                                title={
                                  result.isPinned ? 'Unpin note' : 'Pin note'
                                }
                              >
                                <Icons.Star size={12} />
                              </button>
                            )}

                            {/* Move action */}
                            {onMoveNote && (
                              <button
                                onClick={e => handleMoveAction(e, result)}
                                className="p-1 rounded text-theme-text-tertiary hover:text-theme-text-secondary hover:bg-theme-bg-tertiary transition-colors"
                                title="Move note"
                              >
                                <Icons.Move size={12} />
                              </button>
                            )}

                            {/* Delete action */}
                            {onDeleteNote && (
                              <button
                                onClick={e => handleDeleteAction(e, result)}
                                className="p-1 rounded text-theme-text-tertiary hover:text-theme-accent-red hover:bg-theme-bg-tertiary transition-colors"
                                title="Delete note"
                              >
                                <Icons.Trash size={12} />
                              </button>
                            )}
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                )
              })}
            </div>
          )}

          {/* Search History */}
          {results.length === 0 &&
            !query.trim() &&
            showHistory &&
            searchHistory.length > 0 && (
              <div>
                <div className="px-3 py-2 text-xs font-medium text-theme-text-tertiary bg-theme-bg-tertiary border-b border-theme-border-primary">
                  Recent searches
                </div>

                {searchHistory.map((historyItem, index) => {
                  const globalIndex = index
                  const isSelected = selectedIndex === globalIndex

                  return (
                    <div
                      key={index}
                      data-result-index={globalIndex}
                      onClick={() => handleHistoryClick(historyItem)}
                      className={`px-3 py-2 cursor-pointer border-b border-theme-border-primary last:border-b-0 transition-all duration-150 ${
                        isSelected
                          ? 'bg-theme-accent-green/10 border-l-2 border-l-theme-accent-green'
                          : 'hover:bg-theme-bg-tertiary'
                      }`}
                    >
                      <div className="flex items-center space-x-3">
                        <Icons.Clock
                          size={14}
                          className="text-theme-text-tertiary"
                        />
                        <span className="text-sm text-theme-text-secondary">
                          {historyItem}
                        </span>
                      </div>
                    </div>
                  )
                })}
              </div>
            )}

          {/* No Results */}
          {results.length === 0 && query.trim() && !isSearching && (
            <div className="px-3 py-4 text-center text-sm text-theme-text-tertiary">
              No notes found for "{query}"
            </div>
          )}
      </DropdownMenu>
    </div>
  )
}

export default SearchBar
